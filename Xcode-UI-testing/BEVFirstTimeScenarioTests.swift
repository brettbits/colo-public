//
//  BEVFirstTimeScenarioTests.swift
//  Colo
//
//  Created by Brett Neely on 5/4/16.
//

import XCTest

/* INFO: This file contains five classes; one superclass (BEVFirstTimeScenarioTests) and four subclasses. The tests are implemented in the subclasses.
 
 These tests have a prerequisite of default privacy settings on the device or simulator, so Colo displays its authorization requests to access the user's contacts and location, and the tests respond to them. Because these tests currently require manual intervention, they should either not be included in the UI Tests target, or continueAfterFailure should be set to true.
 
 Testing workflow:
 
 1. Reset privacy settings (either in the Reset section of the iOS Settings app, or via the "Reset Content and Settings..." menu item in the Simulator. Xcode UI testing does not currently provide a way to run in a sandboxed instance or reset privacy settings.
 2. Manually run a specific subclass test from Xcode
 
 */

class BEVFirstTimeScenarioTests: Colo_UI_Tests {
    
    // Constant strings matching the button text in the authorization alerts
    let denyContacts = "Don’t Allow"
    let allowContacts = "OK"
    
    let denyLocation = "Don’t Allow"
    let allowLocation = "Allow"
    
    // Bool variables to ensure that the expected alerts appeared
    var contactsAlertAppeared: Bool = false
    var locationAlertAppeared: Bool = false
        
    override func setUp() {
        super.setUp()
        
        // See the comment at the top of this file about using continueAfterFailure versus excluding these test classes from the UI testing target
        continueAfterFailure = true
        
        // BUG: Due to Xcode UI testing limitation, privacy settings reset is not performed here as required
    }
    
    // Tell Colo_UI_Tests superclass to not insert its default interruption handlers
    override func addDefaultAlertHandlers() -> Bool {
        return false
    }
    
    override func tearDown() {
        // Ensure that both alerts appeared
        XCTAssertTrue(contactsAlertAppeared)
        XCTAssertTrue(locationAlertAppeared)

        // BUG: Due to Xcode UI testing limitation, privacy settings reset is not performed here as required

        super.tearDown()
    }
    
    func respondToContactsAlert(buttonText: String) {
        addUIInterruptionMonitorWithDescription("contacts authorization") { (alert) -> Bool in
            // INFO: the following string is generated by iOS and may be version-dependent
            if ("“Colo” Would Like to Access Your Contacts" == alert.label) {
                alert.buttons[buttonText].tap()
                NSLog("handled contacts alert")
                self.contactsAlertAppeared = true
                return true
            }
            return false
        }
    }
    
    func respondToLocationAlert(buttonText: String) {
        addUIInterruptionMonitorWithDescription("location authorization") { (alert) -> Bool in
            // INFO: the following string is generated by iOS and may be version-dependent
            if ("Allow “Colo” to access your location while you use the app?" == alert.label) {
                alert.buttons[buttonText].tap()
                NSLog("handled location alert")
                self.locationAlertAppeared = true
                return true
            }
            return false
        }
    }
    
    func assertContactsDisabledMessageExpected(expected: Bool) {
        // INFO: could obtain the string format from Localizable.strings
        let contactsDisabledText = self.app.staticTexts["Contacts access disabled. You can enable Contacts access in Privacy Settings."]
        XCTAssert(expected == contactsDisabledText.exists)
    }
    
    func assertLocationDisabledMessageExpected(expected: Bool) {
        // INFO: could obtain the string format from Localizable.strings
        let locationDisabledText = self.app.staticTexts["Location Services disabled. You can enable Location Services in Privacy Settings."]
        XCTAssert(expected == locationDisabledText.exists)
    }
}

class BEVFirstTimeScenarioTestsDenyContactsDenyLocation: BEVFirstTimeScenarioTests {

    override func setUp() {
        super.setUp()
        respondToContactsAlert(self.denyContacts)
        respondToLocationAlert(self.denyLocation)
    }
    
    func testPermissions() {
        self.app.statusBars.element.tap()

        self.nearMeButton.tap()
        assertContactsDisabledMessageExpected(true)
        assertLocationDisabledMessageExpected(false)
        
        self.regionsButton.tap()
        assertContactsDisabledMessageExpected(true)
        assertLocationDisabledMessageExpected(false)
        
        self.contactsButton.tap()
        assertContactsDisabledMessageExpected(true)
        assertLocationDisabledMessageExpected(false)
    }
}

class BEVFirstTimeScenarioTestsDenyContactsAllowLocation: BEVFirstTimeScenarioTests {

    override func setUp() {
        super.setUp()
        respondToContactsAlert(self.denyContacts)
        respondToLocationAlert(self.allowLocation)
    }
    
    func testPermissions() {
        self.app.statusBars.element.tap()

        self.nearMeButton.tap()
        assertContactsDisabledMessageExpected(true)
        assertLocationDisabledMessageExpected(false)

        self.regionsButton.tap()
        assertContactsDisabledMessageExpected(true)
        assertLocationDisabledMessageExpected(false)

        self.contactsButton.tap()
        assertContactsDisabledMessageExpected(true)
        assertLocationDisabledMessageExpected(false)
    }
}

class BEVFirstTimeScenarioTestsAllowContactsDenyLocation: BEVFirstTimeScenarioTests {

    override func setUp() {
        super.setUp()
        respondToContactsAlert(self.allowContacts)
        respondToLocationAlert(self.denyLocation)
    }
    
    func testPermissions() {
        self.app.statusBars.element.tap()

        self.nearMeButton.tap()
        assertContactsDisabledMessageExpected(false)
        assertLocationDisabledMessageExpected(true)

        self.regionsButton.tap()
        assertContactsDisabledMessageExpected(false)
        assertLocationDisabledMessageExpected(false)

        self.contactsButton.tap()
        assertContactsDisabledMessageExpected(false)
        assertLocationDisabledMessageExpected(false)
    }
}

class BEVFirstTimeScenarioTestsAllowContactsAllowLocation: BEVFirstTimeScenarioTests {

    override func setUp() {
        super.setUp()
        respondToContactsAlert(self.allowContacts)
        respondToLocationAlert(self.allowLocation)
    }
    
    func testPermissions() {
        self.app.statusBars.element.tap()
        
        self.nearMeButton.tap()
        assertContactsDisabledMessageExpected(false)
        assertLocationDisabledMessageExpected(false)
        
        self.regionsButton.tap()
        assertContactsDisabledMessageExpected(false)
        assertLocationDisabledMessageExpected(false)
        
        self.contactsButton.tap()
        assertContactsDisabledMessageExpected(false)
        assertLocationDisabledMessageExpected(false)
    }
}
